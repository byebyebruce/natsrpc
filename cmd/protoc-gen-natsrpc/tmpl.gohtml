{{- range .Services}}
{{$ServiceType := .ServiceType}}
{{$ServiceNameVar := print .ServiceType "_NRServiceName" }}
{{$serviceInterface := print .ServiceType "NRServer"}}
{{$serviceAsync := .ServiceAsync}}
{{$serviceWrapperName := print .ServiceType "Wrapper"}}
{{$clientAsync := .ClientAsync}}
{{$clientInterface := print .ServiceType "NRClient"}}
{{$clientWrapperName := print "_" .ServiceType "NRClientImpl"}}

const (
	{{ $ServiceNameVar }} = "{{ .ServiceName }}"
)

type {{ $clientInterface }} interface {
{{- range .Methods }}
	{{- if eq .Publish false }}
		{{ .Comment -}}
		{{ .Name }}(ctx context.Context, req *{{ .Request }}, opt ...natsrpc.CallOption)(*{{ .Reply }}, error)
	{{- else }}
		{{ .Comment -}}
		{{ .Name }}(ctx context.Context, req *{{ .Request }}, opt ...natsrpc.CallOption)(*{{ .Reply }}, error)
	{{- end }}
{{- end }}
}

type {{ $clientWrapperName }} struct {
	c natsrpc.ClientInterface
}

// New{{ $clientInterface }}
func New{{ $clientInterface }}(c natsrpc.ClientInterface) {{ $clientInterface }} {
	ret := &{{ $clientWrapperName }}{
		c:c,
	}
	return ret
}


{{- range .Methods }}
	func (c *{{ $clientWrapperName }}) {{ .Name }}(ctx context.Context, req *{{ .Request }}, opt ...natsrpc.CallOption)(*{{ .Reply }}, error) {
	{{- if eq .Publish false }}
		rep := &{{ .Reply }}{}
		err := c.c.Invoke(ctx, {{ $ServiceNameVar }}, "{{ .Name }}", req, rep, opt...)
		if err != nil {
			return nil, err
		}
		return rep, err
	{{- else }}
		err := c.c.Invoke(ctx, {{ $ServiceNameVar }}, "{{ .Name }}", req, nil, opt...)
		if err != nil {
			return nil, err
		}
		return nil, err
	{{- end }}
	}
{{- end }}



type {{ $serviceInterface }} interface {
{{- range .Methods }}
	{{- if eq .Publish false }}
		{{- if eq $serviceAsync true }}
			{{ .Comment -}}
			{{ .Name }}(ctx context.Context, req *{{ .Request }}, cb func(*{{ .Reply }}, error))
		{{- else }}
			{{ .Comment -}}
			{{ .Name }}(ctx context.Context, req *{{ .Request }}) (*{{ .Reply }}, error)
		{{- end }}
	{{- else }}
		{{ .Comment -}}
		{{ .Name }}(ctx context.Context, req *{{ .Request }}) (*{{ .Reply }}, error)
	{{- end }}
{{- end }}
}

{{- range .Methods }}
func _{{ $ServiceType }}_{{ .Name }}_NRHandler(svc interface{}, ctx context.Context, dec func(interface{}) error) (any, error) {
	req:= &{{ .Request }}{}
	if err := dec(req); err != nil {
		return nil, err
	}

	return svc.({{ $serviceInterface }}).{{ .Name }}(ctx, req)
}
{{- end }}

func Register{{ $serviceInterface }}(register natsrpc.ServiceRegistrar, s {{ $serviceInterface }}, opts ...natsrpc.ServiceOption) (natsrpc.ServiceInterface, error) {
	return register.Register({{ $ServiceType }}_NRServiceDesc, s,  opts...)
}


var {{ $ServiceType }}_NRServiceDesc = natsrpc.ServiceDesc {
	ServiceName: {{ $ServiceNameVar }},
	Methods: []natsrpc.MethodDesc{
		{{- range .Methods }}
			{
				MethodName: "{{ .Name }}",
				Handler: _{{ $ServiceType }}_{{ .Name }}_NRHandler,
				IsPublish: {{ .Publish }},
			},
		{{- end }}
	},
	Metadata: "{{ .Metadata }}",
}



{{- end }}
