package main

import (
	"fmt"
	"os"
	"regexp"
	"strings"

	"github.com/byebyebruce/natsrpc"

	"google.golang.org/protobuf/compiler/protogen"
	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/types/descriptorpb"
)

const (
	contextPackage = protogen.GoImportPath("context")
	natsrpcPackage = protogen.GoImportPath("github.com/byebyebruce/natsrpc")
	//natsPackage    = protogen.GoImportPath("github.com/nats-io/nats.go")
	protoPackage = protogen.GoImportPath("google.golang.org/protobuf/proto")
	fmtPackage   = protogen.GoImportPath("fmt")
	//reflectPackage = protogen.GoImportPath("reflect")
)

// generateFile generates .natsrpc.pb.go file
func generateFile(gen *protogen.Plugin, file *protogen.File, omitempty bool) *protogen.GeneratedFile {
	if len(file.Services) == 0 {
		return nil
	}
	filename := file.GeneratedFilenamePrefix + "_natsrpc.pb.go"
	g := gen.NewGeneratedFile(filename, file.GoImportPath)
	g.P("// Code generated by protoc-gen-natsrpc. DO NOT EDIT.")
	g.P("// versions:")
	//g.P("// - protoc             ", protocVersion(gen))
	g.P(fmt.Sprintf("// - protoc-gen-natsrpc %s", natsrpc.Version))
	if file.Proto.GetOptions().GetDeprecated() {
		g.P("// ", file.Desc.Path(), " is a deprecated file.")
	} else {
		g.P("// source: ", file.Desc.Path())
	}
	g.P()
	g.P("package ", file.GoPackageName)
	g.P()
	generateFileContent(gen, file, g, omitempty)
	return g
}

// generateFileContent generates
func generateFileContent(gen *protogen.Plugin, file *protogen.File, g *protogen.GeneratedFile, omitempty bool) {
	if len(file.Services) == 0 {
		return
	}
	g.P("var _ ", contextPackage.Ident("Context"))
	//g.P("var _ = ", protoPackage.Ident("Marshal"))
	//g.P("var _ = ", fmtPackage.Ident("Errorf"))
	//g.P("var _ ", reflectPackage.Ident("Value"))
	supportVersionVar := "SupportVersion_" + strings.ReplaceAll(strings.TrimPrefix(natsrpc.Version, "v"), ".", "_")
	g.P("var _ = ", natsrpcPackage.Ident(supportVersionVar))
	//g.P("var _ = ", natsPackage.Ident("Version"))

	g.P()

	const (
		replaceComma = "|"
	)
	goPkg := file.Proto.GetOptions().GetGoPackage()
	if len(goPkg) > 0 {
		goPkg = strings.Split(goPkg, ";")[0]
		//goPkg = strings.Replace(goPkg, "/", replaceComma, -1)
	} else {
		goPkg = file.Desc.Path()
	}
	fd := fileSpec{
		GoPackageName: goPkg,
		Services:      make([]*serviceDesc, 0),
	}
	for _, service := range file.Services {
		sd := genService(gen, file, g, service, false)
		fd.Services = append(fd.Services, sd)
	}
	g.P(fd.execute())
}

func genService(gen *protogen.Plugin, file *protogen.File, g *protogen.GeneratedFile, service *protogen.Service, omitempty bool) *serviceDesc {
	if service.Desc.Options().(*descriptorpb.ServiceOptions).GetDeprecated() {
		g.P("//")
		g.P(deprecationComment)
	}
	sd := &serviceDesc{
		ServiceType: service.GoName,
		ServiceName: string(service.Desc.FullName()),
		Comment:     service.Comments.Leading.String(),
		Metadata:    file.Desc.Path(),
	}
	/*
		if v, ok := proto.GetExtension(service.Desc.Options(), natsrpc.E_ServiceAsync).(bool); ok {
			sd.ServiceAsync = v
		}
		if v, ok := proto.GetExtension(service.Desc.Options(), natsrpc.E_ClientAsync).(bool); ok {
			sd.ClientAsync = v
		}

	*/
	for _, method := range service.Methods {
		sd.Methods = append(sd.Methods, buildMethodDesc(g, method, "", ""))
	}
	return sd
}

func buildMethodDesc(g *protogen.GeneratedFile, m *protogen.Method, method, path string) *methodDesc {

	ms := &methodDesc{
		Name:         m.GoName,
		OriginalName: string(m.Desc.Name()),
		Request:      g.QualifiedGoIdent(m.Input.GoIdent),
		Reply:        g.QualifiedGoIdent(m.Output.GoIdent),
		Comment:      m.Comments.Leading.String(),
	}
	if v, ok := proto.GetExtension(m.Desc.Options(), natsrpc.E_Publish).(bool); ok {
		ms.Publish = v
	}
	return ms
}

func buildPathVars(path string) (res map[string]*string) {
	if strings.HasSuffix(path, "/") {
		fmt.Fprintf(os.Stderr, "\u001B[31mWARN\u001B[m: Path %s should not end with \"/\" \n", path)
	}
	res = make(map[string]*string)
	pattern := regexp.MustCompile(`(?i){([a-z\.0-9_\s]*)=?([^{}]*)}`)
	matches := pattern.FindAllStringSubmatch(path, -1)
	for _, m := range matches {
		name := strings.TrimSpace(m[1])
		if len(name) > 1 && len(m[2]) > 0 {
			res[name] = &m[2]
		} else {
			res[name] = nil
		}
	}
	return
}

func replacePath(name string, value string, path string) string {
	pattern := regexp.MustCompile(fmt.Sprintf(`(?i){([\s]*%s[\s]*)=?([^{}]*)}`, name))
	idx := pattern.FindStringIndex(path)
	if len(idx) > 0 {
		path = fmt.Sprintf("%s{%s:%s}%s",
			path[:idx[0]], // The start of the match
			name,
			strings.ReplaceAll(value, "*", ".*"),
			path[idx[1]:],
		)
	}
	return path
}

func camelCaseVars(s string) string {
	subs := strings.Split(s, ".")
	vars := make([]string, 0, len(subs))
	for _, sub := range subs {
		vars = append(vars, camelCase(sub))
	}
	return strings.Join(vars, ".")
}

// camelCase returns the CamelCased name.
// If there is an interior underscore followed by a lower case letter,
// drop the underscore and convert the letter to upper case.
// There is a remote possibility of this rewrite causing a name collision,
// but it's so remote we're prepared to pretend it's nonexistent - since the
// C++ generator lowercases names, it's extremely unlikely to have two fields
// with different capitalizations.
// In short, _my_field_name_2 becomes XMyFieldName_2.
func camelCase(s string) string {
	if s == "" {
		return ""
	}
	t := make([]byte, 0, 32)
	i := 0
	if s[0] == '_' {
		// Need a capital letter; drop the '_'.
		t = append(t, 'X')
		i++
	}
	// Invariant: if the next letter is lower case, it must be converted
	// to upper case.
	// That is, we process a word at a time, where words are marked by _ or
	// upper case letter. Digits are treated as words.
	for ; i < len(s); i++ {
		c := s[i]
		if c == '_' && i+1 < len(s) && isASCIILower(s[i+1]) {
			continue // Skip the underscore in s.
		}
		if isASCIIDigit(c) {
			t = append(t, c)
			continue
		}
		// Assume we have a letter now - if not, it's a bogus identifier.
		// The next word is a sequence of characters that must start upper case.
		if isASCIILower(c) {
			c ^= ' ' // Make it a capital letter.
		}
		t = append(t, c) // Guaranteed not lower case.
		// Accept lower case sequence that follows.
		for i+1 < len(s) && isASCIILower(s[i+1]) {
			i++
			t = append(t, s[i])
		}
	}
	return string(t)
}

// Is c an ASCII lower-case letter?
func isASCIILower(c byte) bool {
	return 'a' <= c && c <= 'z'
}

// Is c an ASCII digit?
func isASCIIDigit(c byte) bool {
	return '0' <= c && c <= '9'
}

func protocVersion(gen *protogen.Plugin) string {
	v := gen.Request.GetCompilerVersion()
	if v == nil {
		return "(unknown)"
	}
	var suffix string
	if s := v.GetSuffix(); s != "" {
		suffix = "-" + s
	}
	return fmt.Sprintf("v%d.%d.%d%s", v.GetMajor(), v.GetMinor(), v.GetPatch(), suffix)
}

const deprecationComment = "// Deprecated: Do not use."
